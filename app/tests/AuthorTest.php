<?php

/**
 * @created 10.11.14 - 11:07
 * @author stefanriedel
 */
class AuthorTest extends TestCase {

	public function testHasManyBooks() {
		$oRelease = new \Carbon\Carbon();
		$oRelease->setDate( 2014, 01, 01 );

		$oBook1 = new \Models\Book( [
			'name'         => 'Laravel Tutorial für Einsteiger',
			'release_date' => $oRelease,
			'asin'         => 'BHJUG238716'
		] );

		$oRelease->addMonths( 6 );

		$oBook2 = new \Models\Book( [
			'name'         => 'Laravel Tutorial für Forteschrittene',
			'release_date' => $oRelease,
			'asin'         => 'APOJUG238561'
		] );

		$oAuthor = $this->_getAuthor();

		$oAuthor->books()->save( $oBook1 );
		$oAuthor->books()->save( $oBook2 );
		$this->assertEquals( 2, $oAuthor->books()->count() );
	}

	public function testManyImages() {
		$oAuthor = $this->_getAuthor();
		$oImage = new \Models\Image ();
		$sFakeImage = \Faker\Provider\Image::image( $dir = '/tmp', $width = 600, $height = 400 );
		$oImage->setOriginalImage( $sFakeImage );
		$oAuthor->images()->save($oImage);
		$this->assertEquals(1, $oAuthor->images()->count());
		$oImage->delete();
	}

	public function testDeleteImage() {
		$oAuthor = $this->_getAuthor();
		$oImage = new \Models\Image ();
		$sFakeImage = \Faker\Provider\Image::image( $dir = '/tmp', $width = 600, $height = 400 );
		$oImage->setOriginalImage( $sFakeImage );
		$oAuthor->images()->save($oImage);
		$oAuthor->images()->where('id', '=', 1)->first()->delete();
		$this->assertEquals(0, $oAuthor->images()->count());
	}

	/**
	 * @return static
	 */
	protected function _getAuthor() {
		$oAuthor = \Models\Author::create( [
			'name'    => 'Stefan Riedel',
			'country' => 'Germany'
		] );
		return $oAuthor;
	}

	public function setUp() {
		parent::setUp(); // TODO: Change the autogenerated stub
		$this->_resetEvents();
	}


	private function _resetEvents() {
		// Define the models that have event listeners.
		$aModels = array( 'Models\Image' );

		// Reset their event listeners.
		foreach ( $aModels as $sModel ) {

			// Flush any existing listeners.
			call_user_func( array( $sModel, 'flushEventListeners' ) );

			// Reregister them.
			call_user_func( array( $sModel, 'boot' ) );
		}
	}

}
